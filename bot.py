import os
import json
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –Ü–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
PROGRESS_FILE = "progress.json"
# –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤
SCREENSHOTS_DIR = "screenshots"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–µ—Å—É
def load_progress():
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, "r") as f:
            return json.load(f)
    return {}

def save_progress(progress):
    with open(PROGRESS_FILE, "w") as f:
        json.dump(progress, f, indent=4)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å (–º–æ–∂–Ω–∞ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥ —Ä–µ–∞–ª—å–Ω—ñ –≥–µ—Ä–æ—ó)
TASKS = {
    "user1": ["–ì–µ—Ä–æ–π A", "–ì–µ—Ä–æ–π B", "–ì–µ—Ä–æ–π C"],
    "user2": ["–ì–µ—Ä–æ–π D", "–ì–µ—Ä–æ–π E", "–ì–µ—Ä–æ–π F"],
    # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —ó—Ö –∑–∞–≤–¥–∞–Ω–Ω—è
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
if not os.path.exists(SCREENSHOTS_DIR):
    os.makedirs(SCREENSHOTS_DIR)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    username = user.username if user.username else user.first_name
    user_id = str(user.id)
    
    progress = load_progress()
    
    if user_id not in progress:
        # –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±—ñ–ª—å—à –¥–∏–Ω–∞–º—ñ—á–Ω–æ)
        progress[user_id] = {
            "username": username,
            "tasks": TASKS.get(username, ["–ì–µ—Ä–æ–π A", "–ì–µ—Ä–æ–π B", "–ì–µ—Ä–æ–π C"]),
            "completed": []
        }
        save_progress(progress)
    
    reply_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {username}! üëã\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥—É —É –∑–±–æ—Ä—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∑ Mobile Legends.\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /tasks.\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å /help."
    )
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        ["–î–æ–¥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å"],
        ["–ö–æ–º–∞–Ω–¥–∏", "–î–æ–ø–æ–º–æ–≥–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(reply_text, reply_markup=reply_markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /tasks
async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = str(user.id)
    progress = load_progress()
    
    if user_id in progress:
        tasks = progress[user_id]["tasks"]
        tasks_text = "\n".join([f"- {task}" for task in tasks])
        await update.message.reply_text(f"–í–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n{tasks_text}")
    else:
        await update.message.reply_text("–í–∏ —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /progress
async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = str(user.id)
    progress = load_progress()
    
    if user_id in progress:
        completed = progress[user_id]["completed"]
        total = len(progress[user_id]["tasks"])
        progress_text = f"–í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ {len(completed)}/{total} –∑–∞–≤–¥–∞–Ω—å."
        if completed:
            completed_tasks = "\n".join([f"- {task}" for task in completed])
            progress_text += f"\n\n–ó–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n{completed_tasks}"
        await update.message.reply_text(progress_text)
    else:
        await update.message.reply_text("–í–∏ —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.\n"
        "/tasks - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.\n"
        "/progress - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
    )
    await update.message.reply_text(help_text)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.message.text
    if query == "–î–æ–¥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    elif query == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å":
        await progress_command(update, context)
    elif query == "–ö–æ–º–∞–Ω–¥–∏":
        await help_command(update, context)
    elif query == "–î–æ–ø–æ–º–æ–≥–∞":
        await help_command(update, context)
    else:
        await update.message.reply_text("–ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É
async def add_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = str(user.id)
    progress = load_progress()
    
    if user_id not in progress:
        await update.message.reply_text("–í–∏ —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return
    
    if update.message.photo:
        photo_file = update.message.photo[-1].get_file()
        task_list = progress[user_id]["tasks"]
        completed = progress[user_id]["completed"]
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        remaining_tasks = [task for task in task_list if task not in completed]
        if not remaining_tasks:
            await update.message.reply_text("–í–∏ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–ª–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!")
            return
        
        current_task = remaining_tasks[0]
        filename = f"{user_id}_{current_task.replace(' ', '_')}.jpg"
        filepath = os.path.join(SCREENSHOTS_DIR, filename)
        await photo_file.download_to_drive(filepath)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
        progress[user_id]["completed"].append(current_task)
        save_progress(progress)
        
        await update.message.reply_text(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è '{current_task}' –æ—Ç—Ä–∏–º–∞–Ω–æ! üéâ")
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–æ—Ç–æ.")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return
    
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("tasks", tasks_command))
    application.add_handler(CommandHandler("progress", progress_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
    application.add_handler(MessageHandler(filters.PHOTO, add_screenshot))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
