import os
import logging
import asyncio
from datetime import datetime
from sqlalchemy import create_engine, Column, String, Integer, ForeignKey, DateTime, Boolean, func, LargeBinary
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    logger.error("DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
    exit(1)

# –ó–∞–º—ñ–Ω—é—î–º–æ 'postgres://' –Ω–∞ 'postgresql://', —è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
if DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# –ú–æ–¥–µ–ª—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
class User(Base):
    __tablename__ = 'users'
    user_id = Column(String, primary_key=True, index=True)
    username = Column(String, unique=True, nullable=False)
    badges = Column(String, default="")
    tasks = relationship("Task", back_populates="user")
    contributions = relationship("Contribution", back_populates="user")
    screenshots = relationship("Screenshot", back_populates="user")  # –î–æ–¥–∞–Ω–æ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ Screenshot

class Task(Base):
    __tablename__ = 'tasks'
    id = Column(Integer, primary_key=True, index=True)
    description = Column(String, nullable=False)
    completed = Column(Boolean, default=False)
    user_id = Column(String, ForeignKey('users.user_id'))
    user = relationship("User", back_populates="tasks")

class Contribution(Base):
    __tablename__ = 'contributions'
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String, ForeignKey('users.user_id'))
    task_id = Column(Integer, ForeignKey('tasks.id'))
    timestamp = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", back_populates="contributions")
    task = relationship("Task")

# –ù–æ–≤–∞ –º–æ–¥–µ–ª—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤
class Screenshot(Base):
    __tablename__ = 'screenshots'
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String, ForeignKey('users.user_id'))
    task_id = Column(Integer, ForeignKey('tasks.id'))
    image_data = Column(LargeBinary, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", back_populates="screenshots")
    task = relationship("Task")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def get_session():
    return SessionLocal()

def add_badge(user, badge_name):
    badges = user.badges.split(", ") if user.badges else []
    if badge_name not in badges:
        badges.append(badge_name)
        user.badges = ", ".join(badges)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = update.effective_user
    user_id = str(user.id)
    username = user.username or user.first_name

    user_entry = session.query(User).filter_by(user_id=user_id).first()
    if not user_entry:
        user_entry = User(user_id=user_id, username=username)
        session.add(user_entry)
        session.commit()

    session.close()

    reply_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {username}! üëã\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥—É —É –∑–±–æ—Ä—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤.\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /tasks.\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å /help."
    )

    keyboard = [
        ["–î–æ–¥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å"],
        ["–ö–æ–º–∞–Ω–¥–∏", "–î–æ–ø–æ–º–æ–≥–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(reply_text, reply_markup=reply_markup)

async def tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = update.effective_user
    user_id = str(user.id)

    user_entry = session.query(User).filter_by(user_id=user_id).first()
    if not user_entry:
        await update.message.reply_text("–í–∏ —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        session.close()
        return

    tasks = session.query(Task).filter_by(user_id=user_id).all()
    if not tasks:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        session.close()
        return

    tasks_text = ""
    for task in tasks:
        status = "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ" if task.completed else "‚ùå –ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ"
        tasks_text += f"- {task.description} : {status}\n"

    await update.message.reply_text(f"–í–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n{tasks_text}")
    session.close()

async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = update.effective_user
    user_id = str(user.id)

    user_entry = session.query(User).filter_by(user_id=user_id).first()
    if not user_entry:
        await update.message.reply_text("–í–∏ —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        session.close()
        return

    completed = session.query(Task).filter_by(user_id=user_id, completed=True).count()
    total = session.query(Task).filter_by(user_id=user_id).count()

    progress_text = f"–í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ {completed} –∑ {total} –∑–∞–≤–¥–∞–Ω—å."
    await update.message.reply_text(progress_text)
    session.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.\n"
        "/tasks - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.\n"
        "/progress - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å.\n"
        "/leaderboard - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø —É—á–∞—Å–Ω–∏–∫—ñ–≤.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
    )
    await update.message.reply_text(help_text)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    if query == "–î–æ–¥–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç":
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç.")
    elif query == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å":
        await progress_command(update, context)
    elif query in ["–ö–æ–º–∞–Ω–¥–∏", "–î–æ–ø–æ–º–æ–≥–∞"]:
        await help_command(update, context)
    else:
        await update.message.reply_text("–ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help.")

async def add_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É")
    session = get_session()
    user = update.effective_user
    user_id = str(user.id)

    try:
        user_entry = session.query(User).filter_by(user_id=user_id).first()
        if not user_entry:
            await update.message.reply_text("–í–∏ —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
            return

        if update.message.photo:
            photo_file = await update.message.photo[-1].get_file()
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

            task = session.query(Task).filter_by(user_id=user_id, completed=False).first()
            if not task:
                await update.message.reply_text("–í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è!")
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å")
                return

            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ —É –≤–∏–≥–ª—è–¥—ñ –±–∞–π—Ç—ñ–≤
            photo_bytes = await photo_file.download_as_bytearray()
            logger.info(f"–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É –≤–∏–≥–ª—è–¥—ñ –±–∞–π—Ç—ñ–≤, —Ä–æ–∑–º—ñ—Ä: {len(photo_bytes)} –±–∞–π—Ç")

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            screenshot = Screenshot(
                user_id=user_id,
                task_id=task.id,
                image_data=photo_bytes
            )
            session.add(screenshot)
            logger.info(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —Å–µ—Å—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –≤–Ω–µ—Å–∫—ñ–≤
            task.completed = True
            contribution = Contribution(user_id=user_id, task_id=task.id)
            session.add(contribution)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–∞–¥–∂—ñ
            total_contributions = session.query(Contribution).filter_by(user_id=user_id).count()
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –º–∞—î {total_contributions} –≤–Ω–µ—Å–∫—ñ–≤")

            if total_contributions == 5:
                add_badge(user_entry, "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å")
                await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–∞–¥–∂ **–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å** üéñÔ∏è", parse_mode='Markdown')
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –±–∞–¥–∂ '–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å'")
            elif total_contributions == 10:
                add_badge(user_entry, "–ê–∫—Ç–∏–≤–Ω–∏–π")
                await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–∞–¥–∂ **–ê–∫—Ç–∏–≤–Ω–∏–π** üéñÔ∏è", parse_mode='Markdown')
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –±–∞–¥–∂ '–ê–∫—Ç–∏–≤–Ω–∏–π'")

            session.commit()
            logger.info(f"–°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫–æ–º—ñ—á–µ–Ω–∞")

            await update.message.reply_text(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è '{task.description}' –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! üéâ")
        else:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–æ—Ç–æ.")
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –Ω–µ —Ñ–æ—Ç–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        session.close()
        logger.info(f"–°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    top_users = session.query(User.username, func.count(Contribution.id).label('contributions')) \
                       .join(Contribution) \
                       .group_by(User.username) \
                       .order_by(func.count(Contribution.id).desc()) \
                       .limit(3).all()

    if not top_users:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
        session.close()
        return

    leaderboard_text = "üèÜ **–¢–æ–ø 3 —É—á–∞—Å–Ω–∏–∫–∏** üèÜ\n\n"
    for idx, (username, contributions) in enumerate(top_users, start=1):
        leaderboard_text += f"{idx}. {username} - {contributions} –≤–Ω–µ—Å–∫—ñ–≤\n"

    await update.message.reply_text(leaderboard_text, parse_mode='Markdown')
    session.close()

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def main():
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return

    application = ApplicationBuilder().token(TOKEN).build()

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
    await application.bot.delete_webhook(drop_pending_updates=True)
    logger.info("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    Base.metadata.create_all(bind=engine)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("tasks", tasks_command))
    application.add_handler(CommandHandler("progress", progress_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))
    application.add_handler(MessageHandler(filters.PHOTO, add_screenshot))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
