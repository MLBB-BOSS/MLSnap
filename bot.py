import os
import logging
from datetime import datetime
from sqlalchemy import create_engine, Column, String, Integer, ForeignKey, DateTime, LargeBinary, Table
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, sessionmaker
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    logger.error("DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
    exit(1)

# –ó–∞–º—ñ–Ω—é—î–º–æ 'postgres://' –Ω–∞ 'postgresql://', —è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
if DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)
    logger.info("–ó–∞–º—ñ–Ω–µ–Ω–æ 'postgres://' –Ω–∞ 'postgresql://' —É DATABASE_URL")

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∞—Å–æ—Ü—ñ–∞—Ç–∏–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –±–∞–≥–∞—Ç–æ-–¥–æ-–±–∞–≥–∞—Ç—å–æ—Ö –∑–≤‚Äô—è–∑–∫—É –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç–∞ —Ç–µ–≥–∞–º–∏
user_tags = Table(
    'user_tags',
    Base.metadata,
    Column('user_id', String, ForeignKey('users.user_id'), primary_key=True),
    Column('tag_id', Integer, ForeignKey('tags.id'), primary_key=True)
)

# –ú–æ–¥–µ–ª—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
class User(Base):
    __tablename__ = 'users'
    user_id = Column(String, primary_key=True, index=True)
    username = Column(String, unique=True, nullable=False)
    badges = Column(String, default="")
    tags = relationship("Tag", secondary=user_tags, back_populates="users")
    contributions = relationship("Contribution", back_populates="user")
    screenshots = relationship("Screenshot", back_populates="user")

class Tag(Base):
    __tablename__ = 'tags'
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, nullable=False)
    users = relationship("User", secondary=user_tags, back_populates="tags")

class Character(Base):
    __tablename__ = 'characters'
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, nullable=False)
    role = Column(String, nullable=False)
    screenshots = relationship("Screenshot", back_populates="character")

class Contribution(Base):
    __tablename__ = 'contributions'
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String, ForeignKey('users.user_id'))
    character_id = Column(Integer, ForeignKey('characters.id'))
    timestamp = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", back_populates="contributions")
    character = relationship("Character")

class Screenshot(Base):
    __tablename__ = 'screenshots'
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String, ForeignKey('users.user_id'))
    character_id = Column(Integer, ForeignKey('characters.id'))
    image_data = Column(LargeBinary, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)
    user = relationship("User", back_populates="screenshots")
    character = relationship("Character", back_populates="screenshots")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def get_session():
    return SessionLocal()

def add_badge(user, badge_name):
    badges = user.badges.split(", ") if user.badges else []
    if badge_name not in badges:
        badges.append(badge_name)
        user.badges = ", ".join(badges)

def load_characters():
    session = get_session()
    existing_characters = session.query(Character).count()
    if existing_characters == 0:
        # –ü–µ—Ä–µ–ª—ñ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∑–∞ –∫–ª–∞—Å–∞–º–∏
        characters_data = [
            # Fighter
            {"name": "Balmond", "role": "Fighter"},
            {"name": "Alucard", "role": "Fighter"},
            {"name": "Bane", "role": "Fighter"},
            {"name": "Zilong", "role": "Fighter"},
            {"name": "Freya", "role": "Fighter"},
            # Tank
            {"name": "Alice", "role": "Tank"},
            {"name": "Tigreal", "role": "Tank"},
            {"name": "Akai", "role": "Tank"},
            {"name": "Franco", "role": "Tank"},
            {"name": "Minotaur", "role": "Tank"},
            # Assassin
            {"name": "Saber", "role": "Assassin"},
            {"name": "Alucard", "role": "Assassin"},
            {"name": "Zilong", "role": "Assassin"},
            {"name": "Fanny", "role": "Assassin"},
            {"name": "Natalia", "role": "Assassin"},
            # Marksman
            {"name": "Popol and Kupa", "role": "Marksman"},
            {"name": "Brody", "role": "Marksman"},
            {"name": "Beatrix", "role": "Marksman"},
            {"name": "Natan", "role": "Marksman"},
            {"name": "Melissa", "role": "Marksman"},
            # Mage
            {"name": "Vale", "role": "Mage"},
            {"name": "Lunox", "role": "Mage"},
            {"name": "Kadita", "role": "Mage"},
            {"name": "Cecillion", "role": "Mage"},
            {"name": "Luo Yi", "role": "Mage"},
            # Support
            {"name": "Rafaela", "role": "Support"},
            {"name": "Minotaur", "role": "Support"},
            {"name": "Lolita", "role": "Support"},
            {"name": "Estes", "role": "Support"},
            {"name": "Angela", "role": "Support"},
        ]
        for char_data in characters_data:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å —ñ–º–µ–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            existing_char = session.query(Character).filter_by(name=char_data["name"]).first()
            if not existing_char:
                character = Character(name=char_data["name"], role=char_data["role"])
                session.add(character)
        session.commit()
        logger.info("–ü–µ—Ä—Å–æ–Ω–∞–∂—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    else:
        logger.info("–ü–µ—Ä—Å–æ–Ω–∞–∂—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
    session.close()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ø–∏—Å–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
HEROES = {
    "Fighter": ["Balmond", "Alucard", "Bane", "Zilong", "Freya"],
    "Tank": ["Alice", "Tigreal", "Akai", "Franco", "Minotaur"],
    "Assassin": ["Saber", "Alucard", "Zilong", "Fanny", "Natalia"],
    "Marksman": ["Popol and Kupa", "Brody", "Beatrix", "Natan", "Melissa"],
    "Mage": ["Vale", "Lunox", "Kadita", "Cecillion", "Luo Yi"],
    "Support": ["Rafaela", "Minotaur", "Lolita", "Estes", "Angela"],
}

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = update.effective_user
    user_id = str(user.id)
    username = user.username or user.first_name

    user_entry = session.query(User).filter_by(user_id=user_id).first()
    if not user_entry:
        user_entry = User(user_id=user_id, username=username)
        session.add(user_entry)
        session.commit()

    session.close()

    reply_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {username}! üëã\n\n"
        "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞. –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:"
    )
    keyboard = [
        ["–í–∏–±—Ä–∞—Ç–∏ –∫–ª–∞—Å", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å"],
        ["–ö–æ–º–∞–Ω–¥–∏", "–î–æ–ø–æ–º–æ–≥–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(reply_text, reply_markup=reply_markup)

async def choose_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(class_name, callback_data=f"class_{class_name}")] for class_name in HEROES.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)

async def handle_class_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("class_"):
        selected_class = data.split("_")[1]
        context.user_data['selected_class'] = selected_class
        characters = HEROES[selected_class]
        keyboard = [[InlineKeyboardButton(char, callback_data=f"character_{char}")] for char in characters]
        keyboard.append([InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∫–ª–∞—Å—ñ–≤", callback_data="back_to_classes")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑ –∫–ª–∞—Å—É **{selected_class}**:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    elif data == "back_to_classes":
        keyboard = [[InlineKeyboardButton(class_name, callback_data=f"class_{class_name}")] for class_name in HEROES.keys()]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)

async def handle_character_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("character_"):
        selected_character = data.split("_")[1]
        context.user_data['selected_character'] = selected_character
        await query.edit_message_text(
            f"–í–∏ –≤–∏–±—Ä–∞–ª–∏: **{selected_character}**.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç.",
            parse_mode='Markdown'
        )

    elif data == "back_to_classes":
        keyboard = [[InlineKeyboardButton(class_name, callback_data=f"class_{class_name}")] for class_name in HEROES.keys()]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=reply_markup)

async def add_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    session = get_session()

    user_entry = session.query(User).filter_by(user_id=user_id).first()
    if not user_entry:
        await update.message.reply_text("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        session.close()
        return

    if 'selected_character' not in context.user_data:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é.")
        session.close()
        return

    selected_character = context.user_data['selected_character']
    character = session.query(Character).filter_by(name=selected_character).first()

    if not character:
        await update.message.reply_text("–í–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
        session.close()
        return

    if update.message.photo:
        try:
            photo_file = await update.message.photo[-1].get_file()
            photo_bytes = await photo_file.download_as_bytearray()

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            screenshot = Screenshot(
                user_id=user_id,
                character_id=character.id,
                image_data=photo_bytes
            )
            session.add(screenshot)

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–Ω–µ—Å–∫—É
            contribution = Contribution(user_id=user_id, character_id=character.id)
            session.add(contribution)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–∞–¥–∂—ñ
            total_contributions = session.query(Contribution).filter_by(user_id=user_id).count()
            if total_contributions == 5 and "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å" not in (user_entry.badges or ""):
                add_badge(user_entry, "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å")
                await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–∞–¥–∂ **–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å** üéñÔ∏è", parse_mode='Markdown')
            elif total_contributions == 10 and "–ê–∫—Ç–∏–≤–Ω–∏–π" not in (user_entry.badges or ""):
                add_badge(user_entry, "–ê–∫—Ç–∏–≤–Ω–∏–π")
                await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–∞–¥–∂ **–ê–∫—Ç–∏–≤–Ω–∏–π** üéñÔ∏è", parse_mode='Markdown')

            session.commit()

            await update.message.reply_text(
                f"–°–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è **{selected_character}** –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! üéâ",
                parse_mode='Markdown'
            )

            # –û—á–∏—â—É—î–º–æ –≤–∏–±—ñ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            context.user_data.pop('selected_character')

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É: {e}")
            await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        finally:
            session.close()
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ñ–æ—Ç–æ.")
        session.close()

async def progress_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session()
    user = update.effective_user
    user_id = str(user.id)

    user_entry = session.query(User).filter_by(user_id=user_id).first()
    if not user_entry:
        await update.message.reply_text("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
        session.close()
        return

    total_contributions = session.query(Contribution).filter_by(user_id=user_id).count()

    progress_text = f"–í–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ **{total_contributions}** —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤."
    await update.message.reply_text(progress_text, parse_mode='Markdown')
    session.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.\n"
        "/choose_class - –í–∏–±—Ä–∞—Ç–∏ –∫–ª–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n"
        "/progress - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
    )
    await update.message.reply_text(help_text)

# –û–±—Ä–æ–±–Ω–∏–∫ callback –∑–∞–ø–∏—Ç—ñ–≤
async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data.startswith("class_"):
        await handle_class_selection(update, context)
    elif data.startswith("character_"):
        await handle_character_selection(update, context)
    elif data == "back_to_classes":
        await handle_class_selection(update, context)
    else:
        await query.answer("–ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –≤–∏–±—ñ—Ä.")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–í–∏–±—Ä–∞—Ç–∏ –∫–ª–∞—Å":
        await choose_class(update, context)
    elif text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å":
        await progress_command(update, context)
    elif text == "–ö–æ–º–∞–Ω–¥–∏":
        await help_command(update, context)
    elif text == "–î–æ–ø–æ–º–æ–≥–∞":
        await help_command(update, context)
    else:
        await update.message.reply_text("–ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help.")

def main():
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return

    application = ApplicationBuilder().token(TOKEN).build()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    Base.metadata.create_all(bind=engine)
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    load_characters()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("choose_class", choose_class))
    application.add_handler(CommandHandler("progress", progress_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))
    application.add_handler(MessageHandler(filters.PHOTO, add_screenshot))

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
        logger.error(msg="Exception while handling an update:", exc_info=context.error)
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º drop_pending_updates=True
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
